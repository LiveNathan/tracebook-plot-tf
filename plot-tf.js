// Insert the data here

const JSArray = [
    // First trace data
    {
        frequency: [15, 15.25, 15.51, 15.78, 16.05, 16.32, 16.6, 16.88, 17.16, 17.46, 17.75, 18.05, 18.36, 18.67, 18.99, 19.31, 19.64, 19.98, 20.32, 20.66, 21.01, 21.37, 21.73, 22.1, 22.48, 22.86, 23.25, 23.64, 24.04, 24.45, 24.87, 25.29, 25.72, 26.16, 26.6, 27.05, 27.51, 27.98, 28.46, 28.94, 29.43, 29.93, 30.44, 30.96, 31.48, 32.02, 32.56, 33.12, 33.68, 34.25, 34.83, 35.43, 36.03, 36.64, 37.26, 37.9, 38.54, 39.2, 39.86, 40.54, 41.23, 41.93, 42.64, 43.37, 44.1, 44.85, 45.61, 46.39, 47.18, 47.98, 48.8, 49.62, 50.47, 51.33, 52.2, 53.08, 53.99, 54.9, 55.84, 56.79, 57.75, 58.73, 59.73, 60.75, 61.78, 62.83, 63.9, 64.98, 66.09, 67.21, 68.35, 69.51, 70.69, 71.89, 73.12, 74.36, 75.62, 76.91, 78.22, 79.54, 80.9, 82.27, 83.67, 85.09, 86.54, 88.01, 89.5, 91.02, 92.57, 94.14, 95.74, 97.37, 99.03, 100.71, 102.42, 104.16, 105.93, 107.73, 109.56, 111.42, 113.32, 115.24, 117.2, 119.19, 121.22, 123.28, 125.37, 127.5, 129.67, 131.87, 134.12, 136.39, 138.71, 141.07, 143.47, 145.9, 148.38, 150.91, 153.47, 156.08, 158.73, 161.43, 164.17, 166.96, 169.8, 172.68, 175.62, 178.6, 181.64, 184.73, 187.86, 191.06, 194.3, 197.61, 200.96, 204.38, 207.85, 211.38, 214.98, 218.63, 222.35, 226.12, 229.97, 233.87, 237.85, 241.89, 246, 250.18, 254.43, 258.76, 263.16, 267.63, 272.18, 276.8, 281.5, 286.29, 291.15, 296.1, 301.13, 306.25, 311.46, 316.75, 322.13, 327.61, 333.17, 338.83, 344.59, 350.45, 356.4, 362.46, 368.62, 374.88, 381.26, 387.73, 394.32, 401.02, 407.84, 414.77, 421.82, 428.99, 436.28, 443.69, 451.23, 458.9, 466.7, 474.63, 482.7, 490.9, 499.24, 507.72, 516.35, 525.13, 534.05, 543.13, 552.36, 561.74, 571.29, 581, 590.87, 600.91, 611.12, 621.51, 632.07, 642.81, 653.74, 664.85, 676.15, 687.64, 699.32, 711.21, 723.29, 735.58, 748.08, 760.8, 773.73, 786.87, 800.25, 813.85, 827.68, 841.74, 856.05, 870.59, 885.39, 900.43, 915.74, 931.3, 947.12, 963.22, 979.59, 996.24, 1013.17, 1030.38, 1047.89, 1065.7, 1083.81, 1102.23, 1120.96, 1140.01, 1159.38, 1179.09, 1199.12, 1219.5, 1240.23, 1261.3, 1282.74, 1304.54, 1326.71, 1349.25, 1372.18, 1395.5, 1419.21, 1443.33, 1467.86, 1492.8, 1518.17, 1543.97, 1570.21, 1596.89, 1624.03, 1651.63, 1679.7, 1708.24, 1737.27, 1766.8, 1796.82, 1827.36, 1858.41, 1889.99, 1922.11, 1954.77, 1987.99, 2021.78, 2056.14, 2091.08, 2126.61, 2162.75, 2199.51, 2236.88, 2274.9, 2313.56, 2352.87, 2392.86, 2433.52, 2474.88, 2516.93, 2559.71, 2603.21, 2647.45, 2692.44, 2738.19, 2784.72, 2832.05, 2880.17, 2929.12, 2978.9, 3029.52, 3081, 3133.36, 3186.61, 3240.76, 3295.84, 3351.85, 3408.81, 3466.74, 3525.65, 3585.56, 3646.5, 3708.47, 3771.49, 3835.58, 3900.76, 3967.05, 4034.47, 4103.03, 4172.75, 4243.66, 4315.78, 4389.12, 4463.71, 4539.57, 4616.71, 4695.17, 4774.96, 4856.1, 4938.63, 5022.55, 5107.91, 5194.71, 5282.99, 5372.77, 5464.07, 5556.93, 5651.36, 5747.4, 5845.07, 5944.4, 6045.42, 6148.16, 6252.64, 6358.9, 6466.96, 6576.86, 6688.62, 6802.29, 6917.89, 7035.45, 7155.01, 7276.6, 7400.26, 7526.02, 7653.91, 7783.98, 7916.26, 8050.79, 8187.61, 8326.75, 8468.25, 8612.16, 8758.51, 8907.36, 9058.73, 9212.67, 9369.23, 9528.45, 9690.38, 9855.05, 10022.53, 10192.85, 10366.07, 10542.23, 10721.38, 10903.58, 11088.87, 11277.32, 11468.96, 11663.87, 11862.08, 12063.66, 12268.67, 12477.17, 12689.2, 12904.84, 13124.15, 13347.18, 13574, 13804.67, 14039.27, 14277.85, 14520.49, 14767.25, 15018.2, 15273.42, 15532.97, 15796.94, 16065.39, 16338.41, 16616.06, 16898.43, 17185.6, 17477.65, 17774.67, 18076.73, 18383.92, 18696.34, 19014.06, 19337.19, 19665.8, 20000],

        magnitude: [-34.83, -35.14, -35.87, -36.6, -36.8, -35.23, -32.29, -29.49, -27.9, -26.56, -25.55, -24.93, -24.5, -24.19, -24.06, -24.21, -24.64, -25.3, -26.75, -29.33, -32.39, -37.02, -41.91, -42.89, -34.06, -24.53, -23.85, -25.2, -25.93, -25.86, -25.7, -25.09, -23.45, -21.77, -20.08, -18.54, -17.33, -16.17, -14.79, -13.54, -12.71, -12.08, -11.54, -11.21, -11.24, -11.31, -11.46, -11.72, -12.2, -12.05, -10.2, -8.3, -6.37, -4.53, -2.81, -1.17, 0.61, 2.1, 3.08, 4.12, 5.11, 6.01, 6.86, 7.32, 7.59, 8.1, 8.8, 9.52, 10.04, 10.34, 10.41, 10.2, 10.11, 10.33, 11.08, 11.56, 11.88, 11.63, 10.96, 10.33, 10.31, 10.47, 10.73, 10.62, 10.32, 9.88, 10.01, 10.11, 10.22, 10.37, 10.74, 11.14, 11.37, 11.49, 11.58, 12, 12.3, 12.25, 12.23, 12.4, 12.36, 12.33, 12.33, 12.53, 12.74, 12.88, 13.02, 12.96, 13.02, 12.72, 12.62, 12.76, 12.76, 12.61, 12.48, 12.31, 12.24, 12.23, 11.77, 11.33, 11.41, 11.93, 12.32, 12.94, 13.05, 12.86, 13.06, 13.26, 13.37, 13.16, 12.99, 12.99, 12.75, 12.72, 12.79, 12.92, 12.8, 12.86, 12.8, 13.04, 13.24, 13.16, 13.41, 13.13, 13.25, 13.52, 13.17, 13.19, 13.36, 13.45, 13.14, 12.79, 12.62, 11.99, 12.09, 12.16, 11.89, 12.29, 12.23, 12.58, 12.94, 13.26, 13.41, 13.42, 13.14, 13.24, 13.24, 13.16, 13.3, 13.87, 13.69, 13.83, 13.69, 13.6, 13.63, 13.78, 14.07, 14.09, 13.64, 13.7, 13.86, 14, 14.17, 13.89, 13.41, 13.27, 13.36, 13.26, 13.19, 13.15, 13.18, 13.23, 12.89, 12.75, 12.76, 12.71, 12.53, 12.57, 12.63, 12.55, 12.4, 12.3, 12.59, 12.49, 12.49, 12.57, 12.22, 12.32, 12.52, 12.47, 12.68, 12.78, 12.68, 12.41, 12.4, 12.25, 12.42, 12.25, 12.2, 11.96, 11.26, 11.52, 11.52, 11.79, 12.17, 12.28, 12.21, 11.85, 11.97, 12.17, 12.34, 12.78, 12.93, 12.79, 12.44, 12.35, 12.31, 12.41, 12.5, 12.39, 12.22, 11.76, 11.67, 11.73, 11.79, 11.6, 11.64, 11.46, 11.07, 10.92, 10.88, 10.83, 10.95, 11.26, 11.24, 11.69, 11.78, 11.99, 11.94, 12.01, 12.1, 11.74, 11.75, 11.78, 11.64, 11.66, 11.35, 11.2, 10.38, 10.2, 9.82, 9.94, 10.19, 10.2, 10.52, 10.62, 11.37, 11.68, 12.11, 12.21, 12.23, 12.34, 11.98, 11.92, 11.71, 11.65, 11.66, 11.53, 11.22, 11.44, 11.86, 11.89, 11.71, 12.04, 11.96, 12.2, 12.39, 12.43, 12.41, 12.31, 12.41, 12.65, 12.77, 13.09, 13.06, 12.85, 12.71, 12.27, 11.56, 11.28, 11.02, 10.96, 11.03, 10.86, 10.93, 10.83, 10.86, 11.36, 11.74, 12.23, 12.54, 13.12, 13.56, 13.38, 13.21, 13.09, 12.84, 12.73, 12.35, 11.9, 11.99, 12.02, 12.04, 12.01, 11.97, 11.89, 11.92, 11.9, 12.37, 12.86, 12.98, 12.13, 11.17, 10.24, 9.98, 10.26, 10.67, 11.14, 12.02, 12.81, 13.22, 13.15, 12.88, 12.34, 12.06, 11.92, 11.8, 11.44, 11.44, 11.44, 11.56, 11.85, 11.95, 12.11, 11.71, 11.6, 11.71, 12.22, 12.86, 13.37, 13.54, 12.95, 12.33, 11.88, 11.61, 11.28, 11.18, 11.36, 12.36, 13.06, 13.4, 13.63, 13.95, 14.31, 14.91, 14.51, 14.38, 14.56, 14.75, 15.07, 15.19, 14.91, 14.83, 14.67, 14.31, 14.63, 14.74, 14, 13.57, 15.18, 15.37, 15.63, 16.17, 16.65, 17.14, 18.01, 18.32, 18.43, 18.89, 19.46, 19.42, 19.02, 18.5, 17.86, 17.51, 17.02, 16.52, 15.63, 14.74, 13.83, 12.11, 11.27, 10.97, 9.81, 8.17, 7.79, 6.05, 4],

        phase: [-86.7, -53.68, 22.63, 100.73, 130.77, 134.7, 137.5, 138.89, 136.79, 123.79, 106.85, 92.71, 81.48, 71.21, 61.94, 54.47, 47.82, 40.13, 27.77, 13.59, 6.85, 51.87, 126.35, 149.53, 100.67, 37.84, 6.63, -13.29, -31.14, -52.34, -67.84, -62.06, -41.35, -36.7, -54.6, -73.82, -86.6, -98.48, -109.85, -121.72, -139.03, -157.33, -170.38, -178.08, -14.09, 170.88, 168.4, 148.18, -95.98, -176.67, -174.32, -176.17, -178.42, 67.5, 169.69, 160.46, 150.98, 141.95, 134.95, 125.45, 114.84, 104.28, 93.52, 84.8, 77.91, 70.79, 61.43, 50.04, 37.78, 26.32, 17.78, 11.2, 4.58, -1.34, -6.64, -15.57, -28.84, -39.64, -47.12, -49.67, -53.09, -56.99, -63.19, -73.03, -79.91, -84.46, -85.63, -88.11, -91.58, -94.91, -98.79, -104.16, -110.01, -118.61, -122.79, -128.02, -135.49, -142.82, -147.03, -151.45, -157.33, -163.23, -167.26, -170.85, -177.93, 176.94, 171.28, 163.57, 155.94, 150.39, 146.29, 140.46, 133.67, 128.67, 123.6, 118.12, 113.61, 107.27, 101.25, 99.21, 97.96, 94.45, 90.49, 84.89, 77.11, 72.45, 67.29, 59.99, 54.77, 46.49, 41.06, 34.89, 27.86, 24.96, 20.5, 14.53, 11.08, 4.98, 1.88, -3.91, -9.22, -15.14, -20.77, -28.33, -32.01, -39.83, -46.96, -50.91, -57.66, -65.14, -72.93, -78.8, -85.63, -90.2, -93.21, -100.23, -101.86, -107.37, -113.84, -116.59, -123.44, -130.84, -139.33, -146.54, -156.23, -161.98, -167.96, -173.14, -177.57, 174.45, 167.43, 159.41, 152.24, 146.32, 139.56, 134.61, 127.01, 119.12, 112.8, 106.38, 99.85, 91.66, 83.18, 74.24, 68.14, 63.67, 56.79, 49.16, 42.91, 36.5, 29.72, 22.66, 14.55, 10.02, 3.54, -3.16, -8.81, -14.08, -21.03, -27.63, -33.93, -39.22, -45.05, -52.46, -58.6, -65.35, -72.81, -78.5, -85.36, -91.92, -97.37, -105.85, -112.53, -119.71, -128.4, -134.28, -141.89, -148.29, -154.41, -161.13, -167.12, -173.12, -174.57, 176.41, 168.74, 160.06, 153.09, 144.27, 139.73, 132.83, 125.78, 117.94, 107.08, 99.08, 90.95, 84.3, 77.49, 70.73, 62.29, 54.45, 46.78, 39.32, 32.79, 25.61, 19.76, 11.96, 5.07, -2.07, -9.27, -15.89, -18.99, -23.52, -27.82, -33.21, -40.61, -46.47, -52.56, -58, -64.23, -70.81, -74.09, -80.92, -86.28, -92.63, -99.1, -103.36, -106.62, -113.15, -115.38, -117.1, -118.1, -119.51, -118.67, -117.67, -121.13, -123.4, -124.24, -128.14, -132.56, -138.07, -143.32, -148.02, -151.46, -154.22, -156.36, -159.84, -162.99, -165.39, -166.04, -164.87, -165.8, -168.72, -172, -174.54, -176.91, -177.67, -179.36, 176.79, 174.64, 171.65, 171.06, 169.99, 167.52, 166.54, 163.19, 158.12, 154.19, 151.68, 151.26, 152.21, 152.78, 153.33, 153.54, 154.72, 154.35, 156.65, 156.53, 159.66, 159.92, 160.49, 159.52, 156.52, 153.55, 148.1, 145.1, 142.21, 140.59, 139.19, 138.42, 139.86, 139.89, 141.01, 141.55, 141.95, 142.25, 142.37, 142.79, 143.47, 145.25, 143.6, 135.31, 132.35, 133.91, 138.25, 145.72, 151.09, 154.48, 157.19, 159.42, 157.91, 154.87, 150.33, 148.38, 148.88, 150.24, 150.71, 151.79, 152.92, 159.71, 162.03, 164.62, 165.97, 167.72, 166.84, 169.72, 173.65, 176.66, -179.63, -178.62, -179.31, 177.78, 172.86, 173.5, 176.62, -179.47, -175.1, -170.24, -163.04, -157.71, -156.25, -155.07, -154.15, -152.86, -150.62, -151.7, -153.57, -152.08, -148.46, -146.38, -146.8, -147.91, -148.09, -148.98, -145.85, -141.36, -138.27, -136.47, -134.1, -123.91, -118.53, -119.11, -115.66, -112.43, -110.92, -110.04, -110.78, -114.77, -114.94, -116.77, -121.56, -126.8, -130.62, -135.46, -136.08, -138.55, -141.27, -143.8, -146.16, -148.72, -147.39, -145.73, -140.24, -140.4, -144.05, -137.59, -126.15, -137.15, -135.33],

        coherence: [0.5165, 0.4778, 0.4375, 0.3957, 0.354, 0.3126, 0.2697, 0.2267, 0.2498, 0.3277, 0.4029, 0.4576, 0.3945, 0.3313, 0.2662, 0.287, 0.3113, 0.3364, 0.3211, 0.3033, 0.2836, 0.2182, 0.1528, 0.1012, 0.0916, 0.082, 0.0761, 0.0723, 0.0829, 0.2272, 0.3751, 0.338, 0.2151, 0.1507, 0.1937, 0.2476, 0.3833, 0.5219, 0.5889, 0.6526, 0.5923, 0.513, 0.5484, 0.6033, 0.6455, 0.6863, 0.68, 0.6718, 0.6575, 0.6441, 0.632, 0.6282, 0.6292, 0.655, 0.6721, 0.6768, 0.6867, 0.6968, 0.7041, 0.7054, 0.7049, 0.704, 0.7031, 0.703, 0.7039, 0.7059, 0.7065, 0.7067, 0.7068, 0.706, 0.7065, 0.7066, 0.7064, 0.7063, 0.7065, 0.7069, 0.707, 0.7068, 0.7062, 0.6359, 0.6828, 0.7059, 0.7068, 0.707, 0.7066, 0.7067, 0.7042, 0.705, 0.7028, 0.7038, 0.7067, 0.7066, 0.7066, 0.7047, 0.7056, 0.7069, 0.707, 0.7069, 0.7069, 0.707, 0.707, 0.7071, 0.707, 0.707, 0.707, 0.707, 0.707, 0.707, 0.707, 0.7068, 0.7067, 0.7069, 0.7071, 0.7069, 0.707, 0.707, 0.707, 0.707, 0.7069, 0.7054, 0.7064, 0.7069, 0.707, 0.707, 0.7071, 0.707, 0.707, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.707, 0.707, 0.707, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7069, 0.707, 0.707, 0.707, 0.7071, 0.707, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.707, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7069, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.707, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.707, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.707, 0.7071, 0.7071, 0.7071, 0.7071, 0.707, 0.7071, 0.7071, 0.707, 0.7071, 0.707, 0.7071, 0.7071, 0.7071, 0.7071, 0.707, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.707, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.707, 0.7071, 0.707, 0.7071, 0.707, 0.707, 0.707, 0.7071, 0.707, 0.7069, 0.707, 0.7071, 0.707, 0.707, 0.707, 0.7071, 0.707, 0.7069, 0.707, 0.7069, 0.707, 0.7069, 0.7069, 0.707, 0.7068, 0.7053, 0.7068, 0.707, 0.7067, 0.7066, 0.7068, 0.7067, 0.7052]
    },

    // Seconday trace data. This is just a copy of the first. REPLACE WITH REAL DATA !!!!!!!!!

    {
        frequency: [15, 15.25, 15.51, 15.78, 16.05, 16.32, 16.6, 16.88, 17.16, 17.46, 17.75, 18.05, 18.36, 18.67, 18.99, 19.31, 19.64, 19.98, 20.32, 20.66, 21.01, 21.37, 21.73, 22.1, 22.48, 22.86, 23.25, 23.64, 24.04, 24.45, 24.87, 25.29, 25.72, 26.16, 26.6, 27.05, 27.51, 27.98, 28.46, 28.94, 29.43, 29.93, 30.44, 30.96, 31.48, 32.02, 32.56, 33.12, 33.68, 34.25, 34.83, 35.43, 36.03, 36.64, 37.26, 37.9, 38.54, 39.2, 39.86, 40.54, 41.23, 41.93, 42.64, 43.37, 44.1, 44.85, 45.61, 46.39, 47.18, 47.98, 48.8, 49.62, 50.47, 51.33, 52.2, 53.08, 53.99, 54.9, 55.84, 56.79, 57.75, 58.73, 59.73, 60.75, 61.78, 62.83, 63.9, 64.98, 66.09, 67.21, 68.35, 69.51, 70.69, 71.89, 73.12, 74.36, 75.62, 76.91, 78.22, 79.54, 80.9, 82.27, 83.67, 85.09, 86.54, 88.01, 89.5, 91.02, 92.57, 94.14, 95.74, 97.37, 99.03, 100.71, 102.42, 104.16, 105.93, 107.73, 109.56, 111.42, 113.32, 115.24, 117.2, 119.19, 121.22, 123.28, 125.37, 127.5, 129.67, 131.87, 134.12, 136.39, 138.71, 141.07, 143.47, 145.9, 148.38, 150.91, 153.47, 156.08, 158.73, 161.43, 164.17, 166.96, 169.8, 172.68, 175.62, 178.6, 181.64, 184.73, 187.86, 191.06, 194.3, 197.61, 200.96, 204.38, 207.85, 211.38, 214.98, 218.63, 222.35, 226.12, 229.97, 233.87, 237.85, 241.89, 246, 250.18, 254.43, 258.76, 263.16, 267.63, 272.18, 276.8, 281.5, 286.29, 291.15, 296.1, 301.13, 306.25, 311.46, 316.75, 322.13, 327.61, 333.17, 338.83, 344.59, 350.45, 356.4, 362.46, 368.62, 374.88, 381.26, 387.73, 394.32, 401.02, 407.84, 414.77, 421.82, 428.99, 436.28, 443.69, 451.23, 458.9, 466.7, 474.63, 482.7, 490.9, 499.24, 507.72, 516.35, 525.13, 534.05, 543.13, 552.36, 561.74, 571.29, 581, 590.87, 600.91, 611.12, 621.51, 632.07, 642.81, 653.74, 664.85, 676.15, 687.64, 699.32, 711.21, 723.29, 735.58, 748.08, 760.8, 773.73, 786.87, 800.25, 813.85, 827.68, 841.74, 856.05, 870.59, 885.39, 900.43, 915.74, 931.3, 947.12, 963.22, 979.59, 996.24, 1013.17, 1030.38, 1047.89, 1065.7, 1083.81, 1102.23, 1120.96, 1140.01, 1159.38, 1179.09, 1199.12, 1219.5, 1240.23, 1261.3, 1282.74, 1304.54, 1326.71, 1349.25, 1372.18, 1395.5, 1419.21, 1443.33, 1467.86, 1492.8, 1518.17, 1543.97, 1570.21, 1596.89, 1624.03, 1651.63, 1679.7, 1708.24, 1737.27, 1766.8, 1796.82, 1827.36, 1858.41, 1889.99, 1922.11, 1954.77, 1987.99, 2021.78, 2056.14, 2091.08, 2126.61, 2162.75, 2199.51, 2236.88, 2274.9, 2313.56, 2352.87, 2392.86, 2433.52, 2474.88, 2516.93, 2559.71, 2603.21, 2647.45, 2692.44, 2738.19, 2784.72, 2832.05, 2880.17, 2929.12, 2978.9, 3029.52, 3081, 3133.36, 3186.61, 3240.76, 3295.84, 3351.85, 3408.81, 3466.74, 3525.65, 3585.56, 3646.5, 3708.47, 3771.49, 3835.58, 3900.76, 3967.05, 4034.47, 4103.03, 4172.75, 4243.66, 4315.78, 4389.12, 4463.71, 4539.57, 4616.71, 4695.17, 4774.96, 4856.1, 4938.63, 5022.55, 5107.91, 5194.71, 5282.99, 5372.77, 5464.07, 5556.93, 5651.36, 5747.4, 5845.07, 5944.4, 6045.42, 6148.16, 6252.64, 6358.9, 6466.96, 6576.86, 6688.62, 6802.29, 6917.89, 7035.45, 7155.01, 7276.6, 7400.26, 7526.02, 7653.91, 7783.98, 7916.26, 8050.79, 8187.61, 8326.75, 8468.25, 8612.16, 8758.51, 8907.36, 9058.73, 9212.67, 9369.23, 9528.45, 9690.38, 9855.05, 10022.53, 10192.85, 10366.07, 10542.23, 10721.38, 10903.58, 11088.87, 11277.32, 11468.96, 11663.87, 11862.08, 12063.66, 12268.67, 12477.17, 12689.2, 12904.84, 13124.15, 13347.18, 13574, 13804.67, 14039.27, 14277.85, 14520.49, 14767.25, 15018.2, 15273.42, 15532.97, 15796.94, 16065.39, 16338.41, 16616.06, 16898.43, 17185.6, 17477.65, 17774.67, 18076.73, 18383.92, 18696.34, 19014.06, 19337.19, 19665.8, 20000],

        magnitude: [-34.83, -35.14, -35.87, -36.6, -36.8, -35.23, -32.29, -29.49, -27.9, -26.56, -25.55, -24.93, -24.5, -24.19, -24.06, -24.21, -24.64, -25.3, -26.75, -29.33, -32.39, -37.02, -41.91, -42.89, -34.06, -24.53, -23.85, -25.2, -25.93, -25.86, -25.7, -25.09, -23.45, -21.77, -20.08, -18.54, -17.33, -16.17, -14.79, -13.54, -12.71, -12.08, -11.54, -11.21, -11.24, -11.31, -11.46, -11.72, -12.2, -12.05, -10.2, -8.3, -6.37, -4.53, -2.81, -1.17, 0.61, 2.1, 3.08, 4.12, 5.11, 6.01, 6.86, 7.32, 7.59, 8.1, 8.8, 9.52, 10.04, 10.34, 10.41, 10.2, 10.11, 10.33, 11.08, 11.56, 11.88, 11.63, 10.96, 10.33, 10.31, 10.47, 10.73, 10.62, 10.32, 9.88, 10.01, 10.11, 10.22, 10.37, 10.74, 11.14, 11.37, 11.49, 11.58, 12, 12.3, 12.25, 12.23, 12.4, 12.36, 12.33, 12.33, 12.53, 12.74, 12.88, 13.02, 12.96, 13.02, 12.72, 12.62, 12.76, 12.76, 12.61, 12.48, 12.31, 12.24, 12.23, 11.77, 11.33, 11.41, 11.93, 12.32, 12.94, 13.05, 12.86, 13.06, 13.26, 13.37, 13.16, 12.99, 12.99, 12.75, 12.72, 12.79, 12.92, 12.8, 12.86, 12.8, 13.04, 13.24, 13.16, 13.41, 13.13, 13.25, 13.52, 13.17, 13.19, 13.36, 13.45, 13.14, 12.79, 12.62, 11.99, 12.09, 12.16, 11.89, 12.29, 12.23, 12.58, 12.94, 13.26, 13.41, 13.42, 13.14, 13.24, 13.24, 13.16, 13.3, 13.87, 13.69, 13.83, 13.69, 13.6, 13.63, 13.78, 14.07, 14.09, 13.64, 13.7, 13.86, 14, 14.17, 13.89, 13.41, 13.27, 13.36, 13.26, 13.19, 13.15, 13.18, 13.23, 12.89, 12.75, 12.76, 12.71, 12.53, 12.57, 12.63, 12.55, 12.4, 12.3, 12.59, 12.49, 12.49, 12.57, 12.22, 12.32, 12.52, 12.47, 12.68, 12.78, 12.68, 12.41, 12.4, 12.25, 12.42, 12.25, 12.2, 11.96, 11.26, 11.52, 11.52, 11.79, 12.17, 12.28, 12.21, 11.85, 11.97, 12.17, 12.34, 12.78, 12.93, 12.79, 12.44, 12.35, 12.31, 12.41, 12.5, 12.39, 12.22, 11.76, 11.67, 11.73, 11.79, 11.6, 11.64, 11.46, 11.07, 10.92, 10.88, 10.83, 10.95, 11.26, 11.24, 11.69, 11.78, 11.99, 11.94, 12.01, 12.1, 11.74, 11.75, 11.78, 11.64, 11.66, 11.35, 11.2, 10.38, 10.2, 9.82, 9.94, 10.19, 10.2, 10.52, 10.62, 11.37, 11.68, 12.11, 12.21, 12.23, 12.34, 11.98, 11.92, 11.71, 11.65, 11.66, 11.53, 11.22, 11.44, 11.86, 11.89, 11.71, 12.04, 11.96, 12.2, 12.39, 12.43, 12.41, 12.31, 12.41, 12.65, 12.77, 13.09, 13.06, 12.85, 12.71, 12.27, 11.56, 11.28, 11.02, 10.96, 11.03, 10.86, 10.93, 10.83, 10.86, 11.36, 11.74, 12.23, 12.54, 13.12, 13.56, 13.38, 13.21, 13.09, 12.84, 12.73, 12.35, 11.9, 11.99, 12.02, 12.04, 12.01, 11.97, 11.89, 11.92, 11.9, 12.37, 12.86, 12.98, 12.13, 11.17, 10.24, 9.98, 10.26, 10.67, 11.14, 12.02, 12.81, 13.22, 13.15, 12.88, 12.34, 12.06, 11.92, 11.8, 11.44, 11.44, 11.44, 11.56, 11.85, 11.95, 12.11, 11.71, 11.6, 11.71, 12.22, 12.86, 13.37, 13.54, 12.95, 12.33, 11.88, 11.61, 11.28, 11.18, 11.36, 12.36, 13.06, 13.4, 13.63, 13.95, 14.31, 14.91, 14.51, 14.38, 14.56, 14.75, 15.07, 15.19, 14.91, 14.83, 14.67, 14.31, 14.63, 14.74, 14, 13.57, 15.18, 15.37, 15.63, 16.17, 16.65, 17.14, 18.01, 18.32, 18.43, 18.89, 19.46, 19.42, 19.02, 18.5, 17.86, 17.51, 17.02, 16.52, 15.63, 14.74, 13.83, 12.11, 11.27, 10.97, 9.81, 8.17, 7.79, 6.05, 4],

        phase: [-86.7, -53.68, 22.63, 100.73, 130.77, 134.7, 137.5, 138.89, 136.79, 123.79, 106.85, 92.71, 81.48, 71.21, 61.94, 54.47, 47.82, 40.13, 27.77, 13.59, 6.85, 51.87, 126.35, 149.53, 100.67, 37.84, 6.63, -13.29, -31.14, -52.34, -67.84, -62.06, -41.35, -36.7, -54.6, -73.82, -86.6, -98.48, -109.85, -121.72, -139.03, -157.33, -170.38, -178.08, -14.09, 170.88, 168.4, 148.18, -95.98, -176.67, -174.32, -176.17, -178.42, 67.5, 169.69, 160.46, 150.98, 141.95, 134.95, 125.45, 114.84, 104.28, 93.52, 84.8, 77.91, 70.79, 61.43, 50.04, 37.78, 26.32, 17.78, 11.2, 4.58, -1.34, -6.64, -15.57, -28.84, -39.64, -47.12, -49.67, -53.09, -56.99, -63.19, -73.03, -79.91, -84.46, -85.63, -88.11, -91.58, -94.91, -98.79, -104.16, -110.01, -118.61, -122.79, -128.02, -135.49, -142.82, -147.03, -151.45, -157.33, -163.23, -167.26, -170.85, -177.93, 176.94, 171.28, 163.57, 155.94, 150.39, 146.29, 140.46, 133.67, 128.67, 123.6, 118.12, 113.61, 107.27, 101.25, 99.21, 97.96, 94.45, 90.49, 84.89, 77.11, 72.45, 67.29, 59.99, 54.77, 46.49, 41.06, 34.89, 27.86, 24.96, 20.5, 14.53, 11.08, 4.98, 1.88, -3.91, -9.22, -15.14, -20.77, -28.33, -32.01, -39.83, -46.96, -50.91, -57.66, -65.14, -72.93, -78.8, -85.63, -90.2, -93.21, -100.23, -101.86, -107.37, -113.84, -116.59, -123.44, -130.84, -139.33, -146.54, -156.23, -161.98, -167.96, -173.14, -177.57, 174.45, 167.43, 159.41, 152.24, 146.32, 139.56, 134.61, 127.01, 119.12, 112.8, 106.38, 99.85, 91.66, 83.18, 74.24, 68.14, 63.67, 56.79, 49.16, 42.91, 36.5, 29.72, 22.66, 14.55, 10.02, 3.54, -3.16, -8.81, -14.08, -21.03, -27.63, -33.93, -39.22, -45.05, -52.46, -58.6, -65.35, -72.81, -78.5, -85.36, -91.92, -97.37, -105.85, -112.53, -119.71, -128.4, -134.28, -141.89, -148.29, -154.41, -161.13, -167.12, -173.12, -174.57, 176.41, 168.74, 160.06, 153.09, 144.27, 139.73, 132.83, 125.78, 117.94, 107.08, 99.08, 90.95, 84.3, 77.49, 70.73, 62.29, 54.45, 46.78, 39.32, 32.79, 25.61, 19.76, 11.96, 5.07, -2.07, -9.27, -15.89, -18.99, -23.52, -27.82, -33.21, -40.61, -46.47, -52.56, -58, -64.23, -70.81, -74.09, -80.92, -86.28, -92.63, -99.1, -103.36, -106.62, -113.15, -115.38, -117.1, -118.1, -119.51, -118.67, -117.67, -121.13, -123.4, -124.24, -128.14, -132.56, -138.07, -143.32, -148.02, -151.46, -154.22, -156.36, -159.84, -162.99, -165.39, -166.04, -164.87, -165.8, -168.72, -172, -174.54, -176.91, -177.67, -179.36, 176.79, 174.64, 171.65, 171.06, 169.99, 167.52, 166.54, 163.19, 158.12, 154.19, 151.68, 151.26, 152.21, 152.78, 153.33, 153.54, 154.72, 154.35, 156.65, 156.53, 159.66, 159.92, 160.49, 159.52, 156.52, 153.55, 148.1, 145.1, 142.21, 140.59, 139.19, 138.42, 139.86, 139.89, 141.01, 141.55, 141.95, 142.25, 142.37, 142.79, 143.47, 145.25, 143.6, 135.31, 132.35, 133.91, 138.25, 145.72, 151.09, 154.48, 157.19, 159.42, 157.91, 154.87, 150.33, 148.38, 148.88, 150.24, 150.71, 151.79, 152.92, 159.71, 162.03, 164.62, 165.97, 167.72, 166.84, 169.72, 173.65, 176.66, -179.63, -178.62, -179.31, 177.78, 172.86, 173.5, 176.62, -179.47, -175.1, -170.24, -163.04, -157.71, -156.25, -155.07, -154.15, -152.86, -150.62, -151.7, -153.57, -152.08, -148.46, -146.38, -146.8, -147.91, -148.09, -148.98, -145.85, -141.36, -138.27, -136.47, -134.1, -123.91, -118.53, -119.11, -115.66, -112.43, -110.92, -110.04, -110.78, -114.77, -114.94, -116.77, -121.56, -126.8, -130.62, -135.46, -136.08, -138.55, -141.27, -143.8, -146.16, -148.72, -147.39, -145.73, -140.24, -140.4, -144.05, -137.59, -126.15, -137.15, -135.33],

        coherence: [0.5165, 0.4778, 0.4375, 0.3957, 0.354, 0.3126, 0.2697, 0.2267, 0.2498, 0.3277, 0.4029, 0.4576, 0.3945, 0.3313, 0.2662, 0.287, 0.3113, 0.3364, 0.3211, 0.3033, 0.2836, 0.2182, 0.1528, 0.1012, 0.0916, 0.082, 0.0761, 0.0723, 0.0829, 0.2272, 0.3751, 0.338, 0.2151, 0.1507, 0.1937, 0.2476, 0.3833, 0.5219, 0.5889, 0.6526, 0.5923, 0.513, 0.5484, 0.6033, 0.6455, 0.6863, 0.68, 0.6718, 0.6575, 0.6441, 0.632, 0.6282, 0.6292, 0.655, 0.6721, 0.6768, 0.6867, 0.6968, 0.7041, 0.7054, 0.7049, 0.704, 0.7031, 0.703, 0.7039, 0.7059, 0.7065, 0.7067, 0.7068, 0.706, 0.7065, 0.7066, 0.7064, 0.7063, 0.7065, 0.7069, 0.707, 0.7068, 0.7062, 0.6359, 0.6828, 0.7059, 0.7068, 0.707, 0.7066, 0.7067, 0.7042, 0.705, 0.7028, 0.7038, 0.7067, 0.7066, 0.7066, 0.7047, 0.7056, 0.7069, 0.707, 0.7069, 0.7069, 0.707, 0.707, 0.7071, 0.707, 0.707, 0.707, 0.707, 0.707, 0.707, 0.707, 0.7068, 0.7067, 0.7069, 0.7071, 0.7069, 0.707, 0.707, 0.707, 0.707, 0.7069, 0.7054, 0.7064, 0.7069, 0.707, 0.707, 0.7071, 0.707, 0.707, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.707, 0.707, 0.707, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7069, 0.707, 0.707, 0.707, 0.7071, 0.707, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.707, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7069, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.707, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.707, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.707, 0.7071, 0.7071, 0.7071, 0.7071, 0.707, 0.7071, 0.7071, 0.707, 0.7071, 0.707, 0.7071, 0.7071, 0.7071, 0.7071, 0.707, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.707, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.7071, 0.707, 0.7071, 0.707, 0.7071, 0.707, 0.707, 0.707, 0.7071, 0.707, 0.7069, 0.707, 0.7071, 0.707, 0.707, 0.707, 0.7071, 0.707, 0.7069, 0.707, 0.7069, 0.707, 0.7069, 0.7069, 0.707, 0.7068, 0.7053, 0.7068, 0.707, 0.7067, 0.7066, 0.7068, 0.7067, 0.7052]
    }

]

// -------------------------------------------------------------------------------
//
// Author:
// Marcus Painter
// marcus@marcuspainter.com
// 2023-04-22
// 2023-05-31 JS trace data
//
// -------------------------------------------------------------------------------

// Params
var INVERT_POLARITY = false;
var COHERENCE_THRESHOLD = 0;
var DELAY_MS = 0;

// SPEED EVERYTHING UP
// Disable ALL amimations globally!
Highcharts.setOptions({
    accessibility: {
        enabled: false // Override warning
    },
    plotOptions: {
        series: {
            animation: false // No!
        },
        line: {
            animation: false // No!
        }
    }
});

// Generate graph
const magnitudeChart = Highcharts.chart("magnitudeCoherenceGraph", {
    chart: {
        type: "line",
        zoomType: "x",
        isZoomed: false,
        alignTicks: false,
        animation: false
    },
    title: {
        text: null,
    },
    xAxis: {
        type: "logarithmic",
        min: 15,
        max: 19000, // Show 16k label
        //allowDecimals: false,
        tickPositions: [
            15, 31, 62, 125, 250, 500, 1000, 2000, 4000, 8000, 16000,
        ].map((v) => Math.log10(v)),
        gridLineWidth: 0.5,
        //crosshair: false
    },
    yAxis: [{
        min: -30,
        max: 30,
        tickInterval: 10,
        //endOnTick: false,
        title: {
            text: "Magnitude",
            reserveSpace: false,
        },
        labels: {
            format: "{value}dB",
        },
        //crosshair: false
    },
        {
            // Secondary yAxis
            title: {
                text: "Coherence",
                reserveSpace: false,
            },
            labels: {
                align: "right",
                formatter: function() {
                    return this.value * 100 + "%";
                },
                //format: '{value}%',
                x: -4,
                y: -2,
            },
            opposite: true,
            min: 0,
            max: 1,
            tickInterval: 0.5,
            gridLineWidth: 0,
            height: '50%'
        },
    ],
    //tooltip: {
    //            split: true,
    //            pointFormat: '{series.name} {point.y:.2f}',
    //           valueDecimals: 0
    //     },
    legend: {
        enabled: false,
    },
    series: [{
        name: "Magnitude",
        yAxis: 0,
        color: "blue",
        //connectNulls: true,
        //data: xymagnitude,
        zIndex: 101,
    },
        {
            name: "Coherence",
            yAxis: 1,
            color: "red",
            connectNulls: false,
            //data: xycoherence,
            zIndex: 100,
        },
        {
            name: "Magnitude",
            yAxis: 0,
            color: "orange",
            //connectNulls: true,
            //data: xymagnitude,
        },
        {
            name: "Coherence",
            yAxis: 1,
            color: "orange",
            connectNulls: false,
            //data: xycoherence,
        },
    ]
})

const phaseChart = Highcharts.chart("phaseGraph", {
    chart: {
        type: "line",
        zoomType: "x",
        isZoomed: false,
        alignTicks: false,
        animation: false
    },
    title: {
        text: null,
    },
    xAxis: {
        type: "logarithmic",
        min: 15,
        max: 19000, // Show 16k label20000
        tickPositions: [
            15, 31, 62, 125, 250, 500, 1000, 2000, 4000, 8000, 16000,
        ].map((v) => Math.log10(v)),
        gridLineWidth: 0.5,
        //crosshair: {enabled: true}
    },
    yAxis: [{
        min: -180,
        max: 180,
        tickInterval: 60,
        title: {
            text: "Phase",
            reserveSpace: false,
        },
        labels: {
            format: "{value}º",
        },
        //crosshair: {enabled: true}
    }, ],
    //tooltip: {
    //          split: true,
    //        pointFormat: '{series.name} {point.y:.2f}º'
    //  },
    legend: {
        enabled: false,
    },
    series: [{
        name: "Phase",
        yAxis: 0,
        color: "blue",
        //connectNulls: true,
        //data: xyphase,
        zIndex: 100,
    },
        {
            name: "Delayed Phase",
            yAxis: 0,
            color: "blue",
            //connectNulls: true,
            //data: xyphase,
            visible: true, // Set this to true when needed
            zIndex: 101,
        },
        {
            name: "Phase",
            yAxis: 0,
            color: "orange",
            //connectNulls: true,
            //data: xyphase,
            visible: false, // Set this to true when needed
        },
    ]
});

// Update using current settings
var url1 = "https://s3.amazonaws.com/appforest_uf/f1613596836165x279561100861491780/behringer%20eurolive%20112%201m.csv";
var url2 = "https://s3.amazonaws.com/appforest_uf/f1649101764323x463244074655706300/BassBoss%20SSP118-MKII%20XO%20100%202.06m%2034.10ms.txt"

// Convert JS array to TF XY pairs
// { frequency[], magnitude[], phase[], coherence[] }
// { [frequency, magnitude], [frequency, phase], [frequency, coherence] }
function js2tf(js) {
    let tf = {};
    tf.magnitude = js.frequency.map((freq, i) => [freq, js.magnitude[i]]);
    tf.phase = js.frequency.map((freq, i) => [freq, js.phase[i]]);
    tf.coherence = js.frequency.map((freq, i) => [freq, js.coherence[i]]);
    return tf;
}

// Convert CSV array to TF XY pairs
// [[frequency, magnitude, phase, coherence]...] 
// { [frequency, magnitude], [frequency, phase], [frequency, coherence] }
function csv2tf(csv) {
    let tf = {};
    tf.magnitude = rows.map(v => {
        return [v[0], v[1]]
    });
    tf.phase = rows.map(v => {
        return [v[0], v[2]]
    });
    tf.coherence = rows.map(v => {
        return [v[0], v[3]]
    });
    return tf;
}

// Main tranfer function
// Main trace
var tf0 = js2tf(JSArray[0]); // Loads data
// Secondary trace
var tf1 = js2tf(JSArray[1]); // laods data. S

processData();

// Processing

// Call this every time a setting changes
function processData() {

    // If tf1 has not been set, create empty object
    if (typeof tf1 === 'undefined' || tf1 === null) {
        tf1 = {
            magnitude: [],
            phase: [],
            coherence: []
        }
    }

    //console.log(`Delay: ${DELAY_MS} Invert:${INVERT_POLARITY} Coherencce:${COHERENCE_THRESHOLD}`)
    const noRedraw = false;
    const noAnimation = false;

    // Magnitude and coherence
    const newxymagnitude = tf0.magnitude.map(mapThreshold);
    const newxycoherence = tf0.coherence.map(mapThreshold);

    magnitudeChart.series[0].setData(newxymagnitude, noRedraw);
    magnitudeChart.series[1].setData(newxycoherence, noRedraw);

    // Original phase
    const newxyphase = tf0.phase.map(mapThreshold);
    phaseChart.series[0].setData(newxyphase, noRedraw);


    // Delayed/inverted phase
    if (DELAY_MS == 0 && !INVERT_POLARITY) {
        // Restore original phase color
        phaseChart.series[0].color = "blue";

        //phaseChart.series[1].setVisible(false, noRedraw);
        phaseChart.series[1].setData(null, noRedraw);

    } else {
        // Orignal phase changes color to background (silver or dashed)
        phaseChart.series[0].color = "silver";

        // Processed phase becomes blue
        const newxydelayphase = tf0.phase.map(mapThreshold).map(mapDelay).map(mapPolarity);
        phaseChart.series[1].setVisible(true, noRedraw);
        phaseChart.series[1].setData(newxydelayphase, noRedraw);
    }

    magnitudeChart.series[2].setData(tf1.magnitude.map(mapThreshold), noRedraw);
    magnitudeChart.series[3].setData(tf1.coherence.map(mapThreshold), noRedraw);

    phaseChart.series[2].setData(tf1.phase.map(mapThreshold), noRedraw);
    phaseChart.series[2].setVisible(true, noRedraw);

    magnitudeChart.redraw(noAnimation);
    phaseChart.redraw(noAnimation)

}

function mapPolarity(v, i) {
    if (!INVERT_POLARITY || v[1] === null) { // Ignore null values
        return v;
    }

    return [v[0], -v[1]];
}

// Apply delay and polarity to XY phase
function mapDelay(v, i) {
    if (v[1] === null) { // Ignore null values
        return v;
    }

    const f = v[0];
    var p = v[1];

    // Delay
    if (DELAY_MS != 0) {
        p = p + (f * 360 * (DELAY_MS * -1 / 1000));
        p = wrapTo180(p);
        p = round(p, 2); // Tidy up decinal places
    }

    return [f, p];
}

// Set XY items to null if below choherence treshhold.
function mapThreshold(v, i) {
    return (tf0.coherence[i][1] < COHERENCE_THRESHOLD) ? [v[0], null] : v;
}

// --------------------------------------------------------------------------------

// Math stuff

// Simplified phase wrap
// https://stackoverflow.com/questions/11498169/dealing-with-angle-wrap-in-c-code/11498248#11498248
// Phase in degress is exact. No need to correct for floating point error as with radians.
function wrapTo180(x) {
    var y = (x + 180) % 360;
    if (y < 0)
        y += 360;
    return y - 180;
}

// Round number to set number of decimal places
function round(x, d) {
    var m = Math.pow(10, d || 0);
    return Math.round(x * m) / m;
}

var isNumber = function isNumber(value) {
    return typeof value === 'number' && isFinite(value);
}

var ticTime, tocTime, ticText;

function tic(text) {
    startTime = performance.now();
}

function toc() {
    endTime = performance.now();
    var timeDiff = endTime - startTime; //in ms
    // strip the ms
    timeDiff /= 1000;

    // get seconds
    var seconds = timeDiff;
    console.log(seconds + " seconds");
}

function doStuff(tf) {
    return (data) => {
        toc();
        //var rows = data.data.slice(2);
        const rows = data.data.filter(v => {
            return v[0] >= 15 && v[0] <= 20000 && isNumber(v[0])
        });
        tf.magnitude = rows.map(v => {
            return [v[0], v[1]]
        });
        tf.phase = rows.map(v => {
            return [v[0], v[2]]
        });
        tf.coherence = rows.map(v => {
            return [v[0], v[3]]
        });

        processData();
    }
}

function parseData(url, callBack) {
    Papa.parse(url, {
        download: true,
        dynamicTyping: true,
        skipEmptyLines: "greedy",
        complete: callBack,
        error: (err) => {
            console.log("Error! ", err)
        }
    });
}
